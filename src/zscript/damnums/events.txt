/*
 * DamNums: by Xaser Acheron
 *
 * Events. 'Nuff said.
 */

class DamNumEventHandler : StaticEventHandler
{
	/*
	 * Original DamNum spawner, for "shotgun spray" mode. Everything else
	 * is handled by the keeper now.
	 */
	override void WorldThingDamaged(WorldEvent e)
	{
		if (dam_enabled && e.thing && e.Thing.bISMONSTER && dam_spray && e.DamageType != 'Massacre')
		{
			// Since WorldThingDamaged is (oddly) called after the actor's officially dead,
			// we need to account for the case where the actor's height has been quartered.
			double targetHeight = (e.Thing.health > 0) ? e.Thing.height : (e.Thing.height * 4);
			Vector3 spawnPos = e.Thing.pos + (0, 0, targetHeight-16);
			DamNum.spawnDamageNumbers(spawnPos, e.Damage, e.DamageType);
		}
	}

	/*
	 * Create Keeper+Courier on thing spawn and revive.
	 */
	override void WorldThingSpawned(WorldEvent e)
	{
		if (e.Thing && e.Thing.bISMONSTER)
		{
			DamNumCourier.Create(e.thing);
		}
	}
	override void WorldThingRevived(WorldEvent e)
	{
		if (e.Thing && e.Thing.bISMONSTER)
		{
			DamNumCourier.Create(e.thing);
		}
	}
}

/*
 * The Courier. This serves as a link between the Keeper and the tracked
 * monster, allowing the latter to communicate with the former (since we can't
 * actually modify the monster definitions to contain an actor pointer to the
 * keeper directly).
 */
class DamNumCourier : Inventory
{
	DamNumKeeper keeper;
	
	/*
	 * Create & set up a Keeper and Courier pair for the specified actor. 
	 */
	static void Create(Actor thing)
	{
		if (thing)
		{
			// Create a Keeper for the monster.
			DamNumKeeper keeper = new("DamNumKeeper");
			keeper.thing = thing;

			// Create and gift a Courier to the monster, Give it the inventory so when the monster dies, it can properly
			// release the damage numbers without needing to do anything special
			// in the event the monster disappears immediately afterwards.
			thing.A_SetInventory("DamNumCourier",1);
			let courier = DamNumCourier(thing.FindInventory("DamNumCourier"));
			if (courier)
			{
				courier.keeper = keeper;
			}
		}
	}

	/*
	 * Upon owner death, spawn the last round of numbers. This is necessary to
	 * cover the case where an actor is removed immediately upon death. 
	 *
	 * [MC] The OwnerDied function is called by the monster itself, which is handy.
	 */
	override void OwnerDied()
	{
		if (keeper) 
		{
			keeper.SpawnAndDestroy();
		}
	}
}

/*
 * The Keeper. Observes an actor, tracks damage changes over the course of a tic,
 * and spawns damage numbers once the tic is complete.
 *
 * [MC] Thinkers are considerably lighter than actors, which makes them ideal for
 *      attaching to actors. They do no special processing -- only what's done in
 *      the tick functions, etc.
 */
class DamNumKeeper : Thinker
{
	Actor thing;
	uint totalDamage;
	int curHealth;
	bool ReadyToDestroy;

	/*
	 * Initialize the keeper.
	 *
	 * [MC] For those unaware, when something is created and immediately modified,
	 *      it's all done before the PostBeginPlay function is called. As seen
	 *      in WorldThingSpawned, the modifications (assigning thing, etc)
	 *      are performed within the same code block, allowing this to work.
	 */
	override void PostBeginPlay()
	{
		// Don't spawn a keeper if our tracked thing is gone or already dead.
		// This stops numbers from spawning for PE-spawned Lost Souls that die
		// instantly due to being in a wall. Was amusing, but unintentional. :P
		if (!thing || thing.health < 1)
		{
			return Destroy();
		}

		curHealth = thing.health;

		Super.PostBeginPlay();
	}

	/*
	 * Track damage and spawn stuff while the actor is alive.
	 */
	override void Tick()
	{
		if (!ReadyToDestroy && thing)
		{
			if (dam_enabled && !dam_spray)
			{
				if (thing.health < curHealth)
				{
					SpawnNumbers();
					curHealth = thing.health;
				}
			// [XA] If I ever add "healing" support, that goes here.
			}
		}
		else
		{
			// Clean up after oneself just in case an actor gets
			// Thing_Remove'd or similar.
			
			// Do not process the super tick, it's just wasting computation.
			return Destroy();
		}
		Super.Tick();
	}

	/*
	 * Do the actual number spawn. There's a bit of calculation and checking
	 * that's common to all Keeper spawns, so it's done here for convenience.
	 */
	void SpawnNumbers()
	{
		if (dam_enabled && !dam_spray && thing && thing.DamageTypeReceived != 'Massacre')
		{
			Vector3 position = thing.pos + (0, 0, thing.height - 16);
			totalDamage = curHealth - thing.health;
			DamNum.spawnDamageNumbers(position, totalDamage, thing.DamageTypeReceived);
		}
	}

	/*
	 * Does what it says on the tin. Spawns the final round of numbers, then goes "poof".
	 * This seems redundant with Tick(), but there are cases where an actor can
	 * die and be removed before the keeper's Tick() gets called (i.e. D4D's gib deaths),
	 * so we handle actor death as a specific case.
	 */
	void SpawnAndDestroy()
	{
		// Do not destroy the thinker here. Let the Tick destroy it instead,
		// or else it'll break thinker iterators!
		SpawnNumbers();
		ReadyToDestroy = true;
	}
}
